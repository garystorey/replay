generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Replay {
  id           String      @id @default(cuid())
  controllerId String
  created      DateTime    @default(now())
  updated      DateTime    @updatedAt()
  data         Json
  ReplayInfo   ReplayInfo?
  controller   Controller  @relation(fields: [controllerId], references: [id])

  @@index(id)
  @@index([controllerId])
}

model ReplayInfo {
  id          String   @id @default(cuid())
  created     DateTime @default(now())
  updated     DateTime @updatedAt()
  name        String
  description String

  replayId String @unique
  replay   Replay @relation(fields: [replayId], references: [id])

  tags TagsOnReplays[]

  @@index(id)
  @@index([replayId])
}

model Tag {
  id      String          @id @default(cuid())
  name    String?
  replays TagsOnReplays[]

  @@index(id)
}

model TagsOnReplays {
  replay       ReplayInfo @relation(fields: [replayInfoId], references: [id])
  replayInfoId String
  tag          Tag        @relation(fields: [tagId], references: [id])
  tagId        String

  @@id([replayInfoId, tagId])
  @@index([replayInfoId])
  @@index([tagId])
}

model Controller {
  id           String   @id @default(cuid())
  serialNumber String   @unique
  ownerId      String
  owner        User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  replay       Replay[]

  @@index(id)
  @@index([ownerId])
  @@index([serialNumber])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  nickname      String?      @default("")
  accounts      Account[]
  sessions      Session[]
  Controller    Controller[]

  @@index(id)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index(id)
  @@index([id, userId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(id)
  @@index([id, userId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
